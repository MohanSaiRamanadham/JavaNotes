What is Java?
	1.Java is an most popular High level, Object-Oriented Programming language used to build web applications, mobile applications and Enterprise applications.
	2.Java is an platform independent Language.
	3.Robust and Secure: Java has strong memory management, exception handling, and a security model.
	4.Automatic Memory Management: Java uses garbage collection to automatically manage memory

Why Java is Platform Independent?
	1.Java source code is compiled into bytecode, not machine code.
	2.Bytecode is universal, not tied to any platform.
	3.The JVM runs the bytecode, and the JVM is customized for each operating system.
	4.This is what makes Java programs run anywhere, as long as the platform has the correct JVM installed.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

OOP's:
------
What is Java Class?
In java class is the blueprint or a template by which we can create java Objects. A class will contains
	1.Properties (also called fields or variables)
	2.Behaviors (also called methods or functions)
Example:
--------
If you are designing a Car
	1.the class is a blueprint of that car(A car should Have Engine, Wheels, Brakes, color etc..,)
	2.the object is the actual car built  by this blueprint.

What the Four Main Pillars of OOP in Java?
	1.Encapsulation
	2.Inheritance
	3.polymorphism
	4.Abstraction

1.Encapsulation:
--------------
	1.Encapsulation is the one of the fundametal feature of Object-Oriented Programming.
	2.Wrapping Data and metthods to geather as a single unit.
	3.To control the direct access over the data of object of a class.
	4.this is to protect the integrity of data and hide the internal implementation of details from outside of the code.
  Key points about Encapsulation in Java:
	1.Data Hiding: The variables of a class are hidden from other classes and can only be accessed through methods of their current class. This is typically achieved by declaring variables as private.
	2.Access through Getters and Setters: To access and update the value of private variables, public methods called getter and setter are provided. This way, you can control how variables are accessed or modified.
	3.Benefits:
		a.Protects the internal state of an object.
		b.Prevents unauthorized access.
		c.Makes the code more maintainable and flexible.
		d.Allows changing the internal implementation without affecting outside code.
  Example:
  -------
		public class Person {
			// Private variables (data hidden)
			private String name;
			private int age;

			// Public getter method
			public String getName() {
				return name;
			}

			// Public setter method
			public void setName(String name) {
				this.name = name;
			}

			// Getter for age
			public int getAge() {
				return age;
			}

			// Setter for age with validation
			public void setAge(int age) {
				if (age > 0) {
					this.age = age;
				}
			}
		}

2.Inhertance:
-------------
	1.Inheritance is also one of the fundamental concept from Object-Oriented Programming.
	2.In Inheritance, one class(Child Class) will inherit the properties (fields) and behaviors (methods) of another Class(Parent Class).
	3.It helps in code re-usability.
	Example:Animal is the Parent class or super class where as Dog is child class
	-------
		class Animal {
			void eat() {
				System.out.println("This animal eats food.");
			}
		}

		class Dog extends Animal {
			void bark() {
				System.out.println("The dog barks.");
			}
		}
	4.Benefits of inheritance:
		a.Code reuse: Subclasses reuse code from superclasses.
		b.Method overriding: Subclasses can provide a specific implementation of a method already defined in the superclass.
		c.Polymorphism: A subclass object can be treated as an instance of its superclass.
	5.In Java we have different types Inheritance
		a.Single level inheritance
		b.Multi level inheritance
		c.Hierarchial inheritance
		d.Hybrid inheritance
	6.Single Inheritance: in this one child class will inheritone Parent class
	Example:
		class Animal {
			void eat() {
				System.out.println("Animal eats.");
			}
		}

		class Dog extends Animal {
			void bark() {
				System.out.println("Dog barks.");
			}
		}
	7.Multi Level inheritance: in this child class of a Parent class will be a Parent class to another child class
	Example:
		class Animal {
			void eat() {
				System.out.println("Animal eats.");
			}
		}

		class Dog extends Animal {
			void bark() {
				System.out.println("Dog barks.");
			}
		}

		class Puppy extends Dog {
			void weep() {
				System.out.println("Puppy weeps.");
			}
		}

	8.Hierarchial inheritance: in this two or more child classes will inherit a common Parent class
	Example:
		class Animal {
			void eat() {
				System.out.println("Animal eats.");
			}
		}

		class Dog extends Animal {
			void bark() {
				System.out.println("Dog barks.");
			}
		}

		class Cat extends Animal {
			void meow() {
				System.out.println("Cat meows.");
			}
		}

	9.Hybrid inheritance: this is the combination of Hierarchial and Multilevel inheritance.
	10.Multiple Inheritance (with classes): Java does NOT support multiple inheritance with classes to avoid ambiguity (like the Diamond Problem).

3.Polymorphism:
---------------
	1.polymorphism is one of the core concepts of object-oriented programming (OOP).
	2.the term polymorphism means many forms.
	3.In Java, it refers to the ability of a single function, method, or object to behave in different ways based on the context.
	4.Different types of polymorphism
		a.Runtime Polymorphism
		b.Compiletime Polymorphism
	5.Runtime Polymorphism: this is also known as method overriding, this can be achieved in inheritance by writing the method of the parent class inside child class.
	Example:
	--------
		class Animal {
			void sound() {
				System.out.println("Animal makes a sound");
			}
		}

		class Dog extends Animal {
			void sound() {
				System.out.println("Dog barks");
			}
		}

		public class TestPolymorphism {
			public static void main(String[] args) {
				Animal a = new Dog(); // upcasting
				a.sound(); // Outputs: Dog barks
			}
		}

	6.Compiletime Polymorphism: this is also known as method overloading, this can be achieved by writing methods with same name and different number and type of parameters.
	Example:
	--------
		class MathUtils {
			int add(int a, int b) {
				return a + b;
			}

			double add(double a, double b) {
				return a + b;
			}
		}

4.Abstraction:
--------------
	1.In java, Abstraction is on of the important feature of Object-Oriented Programming.
	2.It will be used to hide the implementation of logic and showing only essential things.
	3.We can achieve abstraction in two ways
		a.Using Abstract class
		b.Using Interfaces
	4.Abstract Class:
		1.we can use abstract key word to make a class as an abstract class
		2.we can not create Object of an abstract class
		3.abstract class will contian abstract methods(Without Body) & concrete methods(With body).
		4.we will have a constructor to an Abstract class. However, the constructor of an abstract class is called when a subclass is instantiated.
		Example:
		--------
			abstract class Animal {
				abstract void makeSound();  // abstract method

				void eat() {
					System.out.println("This animal eats food.");  // concrete method
				}
			}

			class Dog extends Animal {
				void makeSound() {
					System.out.println("Bark");
				}
			}
	5.Interface:
		1.Interface will be used to get complete abstraction
		2.It will have only pure abstract methods.
		3.We will not have any constructor to an Interface
		Example:
		-------
			interface Animal {
				void makeSound();  // abstract method
			}

			class Cat implements Animal {
				public void makeSound() {
					System.out.println("Meow");
				}
			}
			
			
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1.Constructor:
--------------
	1.In Java Constructor is a Special type of method.
	2.name of Constructor is same as name of the class without any return type.
	3.constructor is used to instantiate instance variables.
	4.constructor of class is called automatically whenever object of a class is created
	5. A class can have multiple constructors
	Example:
	--------
		public class Car {
			String model;
			int year;

			// Constructor
			public Car(String m, int y) {
				model = m;
				year = y;
			}

			void displayInfo() {
				System.out.println(model + " - " + year);
			}
		}

		// Main class
		public class Main {
			public static void main(String[] args) {
				Car myCar = new Car("Toyota", 2022);  // Constructor is called here
				myCar.displayInfo();  // Output: Toyota - 2022
			}
		}
	6.Types of Constructor
		a. Default constructor:
			1.provided by java if no other constructor is created
			2. it will not have any parameters
			Example:
			--------
				public class Bike {
					Bike() {
						System.out.println("Bike created");
					}
				}
				
		b.Parameterized Constructor:Accepts arguments to initialize values
		Example:
		--------
				public class Car {
					String model;
					int year;

					// Constructor
					public Car(String m, int y) {
						model = m;
						year = y;
					}

					void displayInfo() {
						System.out.println(model + " - " + year);
					}
				}

				// Main class
				public class Main {
					public static void main(String[] args) {
						Car myCar = new Car("Toyota", 2022);  // Constructor is called here
						myCar.displayInfo();  // Output: Toyota - 2022
					}
				}
2.Constructor chaining:
-----------------------
	1.calling one constructor from the another constructor of the same class or from a super class is known as constructor chaining.
	2.There are two types:
		a.Within the same class – using this(...)
		b.From a superclass – using super(...)
	3.Chaining Constructors in the Same Class (using this(...)): You can call another constructor in the same class using the this() keyword. It must be the first line in the constructor.
	Example:
	--------
		public class Person {
			String name;
			int age;

			// Constructor 1
			Person() {
				this("Unknown", 0); // Calls Constructor 2
				System.out.println("Default constructor called");
			}

			// Constructor 2
			Person(String name, int age) {
				this.name = name;
				this.age = age;
				System.out.println("Parameterized constructor called");
			}
		}

	4.Chaining to Superclass Constructor (using super(...)): When a class extends another, you can call the parent class's constructor using super(...). Again, this must be the first line of the child constructor.
	Example:
	-------
		class Animal {
			Animal(String type) {
				System.out.println("Animal type: " + type);
			}
		}

		class Dog extends Animal {
			Dog() {
				super("Dog"); // Calls the constructor in Animal
				System.out.println("Dog constructor called");
			}
		}
	6.Rules to Remember:
		a.this() and super() must be the first statement in the constructor.
		b.You cannot use both this() and super() in the same constructor.
		c.Constructor chaining helps reduce code duplication.


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Questions:
----------
1.What is an abstract class in Java?
	An abstract class in Java is a class that cannot be instantiated on its own and is meant to be extended by other classes. It can contain both abstract methods (without implementation) and concrete methods (with implementation). It’s used to provide a base structure for subclasses.
	
2.Can an abstract class have constructors?
	Yes, an abstract class will have constructor in order to initialize instance variables. Constructor will get called when object of child class is initialized.
	
3.Can you create an object of an abstract class? Why or why not?
	We can not create an object to an abstract class directly, but we can create an object of its child class.Since Abstract class may not have implementation of abstract methods we can not create its objects.
	
4.What is the difference between an abstract class and a regular class?
	An abstract class can have abstract methods (without implementation), while a regular class cannot. Also, an abstract class cannot be instantiated, but a regular class can.
	
5.What is the purpose of the abstract keyword in Java?
	The abstract keyword is used to define abstract classes and methods. It allows you to define methods that must be implemented by subclasses, helping enforce a contract without providing full implementation.
	
6.Can an abstract class have non-abstract methods? If yes, why is that allowed?
	Yes an abstract class can have non-abstract methods which will be called as concrete methods. if the method will be common and fixed to all classes then we  can write non-abstract methods
	
7.Can an abstract class implement an interface?
	Yes, an abstract class can implement an interface. However, it doesn’t have to implement all interface methods. The subclass extending the abstract class must implement any unimplemented interface methods.
	
8.If an abstract class contains a method without a body, what should you do in the subclass?
	we need to write its body in sub class.
	
9.What happens if a subclass does not override all abstract methods of its abstract superclass?
	it will throw compile time error.The subclass must be declared abstract or override all abstract methods.
	
10.Can you declare an abstract method as private or static? Why or why not?
	No we can not declare abstract method as private or static.because an abstract class will not have body implemented. we need to make it available to its child class to overide. private: Can’t be overridden, static: Belongs to class, not instance
	
11.Can a class be both abstract and final? Why or why not?
	No, a class cannot be both abstract and final because abstract means it must be extended, and final means it cannot be extended. They contradict each other.
	
12.In what situations would you choose an abstract class over an interface?
	You choose abstract classes when you want to provide some shared implementation or state.
	
13.Can an abstract class extend another abstract class? What happens in that case?
	Yes, an abstract class can extend another abstract class. It may choose to implement some or none of the abstract methods from the parent. The concrete subclass must implement all remaining abstract methods.
14.
abstract class Animal {
    abstract void makeSound();
    void eat() {
        System.out.println("Animal is eating...");
    }
}

class Dog extends Animal {
    void makeSound() {
        System.out.println("Bark!");
    }
}

public class Test {
    public static void main(String[] args) {
        Animal a = new Dog();
        a.makeSound();
        a.eat();
    }
}

Bark
Animal is eating...

15.
abstract class Shape {
    abstract void draw();
}

class Circle extends Shape {
    // Missing draw method
}

public class Test {
    public static void main(String[] args) {
        Shape s = new Circle();
        s.draw();
    }
}

 this will give compile time error